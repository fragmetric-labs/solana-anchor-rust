#[cfg(feature = "devnet")]
anchor_lang::declare_id!("frag9zfFME5u1SNhUYGa4cXLzMKgZXF3xwZ2Y1KCYTQ");
#[cfg(not(feature = "devnet"))]
anchor_lang::declare_id!("fragnAis7Bp6FTsMoa6YcH8UffhEw43Ph79qAiK3iF3");

/// generated by anchor_gen::generate_cpi_crate!("idl-v0.3.2.json");
use account::*;
use anchor_lang::prelude::*;
use context::*;
use typedef::*;
pub mod typedef {
    #![doc = r" User-defined types."]
    use super::*;
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, Copy)]
    pub enum Asset {
        SOL(u64),
        Token(Pubkey, Option<TokenPricingSource>, u64),
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct AssetPod {
        pub discriminant: u8,
        pub padding: [u8; 7],
        pub sol_amount: u64,
        pub token_amount: u64,
        pub token_mint: Pubkey,
        pub token_pricing_source: TokenPricingSourcePod,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct AssetState {
        pub token_mint: Pubkey,
        pub token_program: Pubkey,
        pub accumulated_deposit_capacity_amount: u64,
        pub accumulated_deposit_amount: u64,
        pub padding: [u8; 5],
        pub withdrawable: u8,
        pub normal_reserve_rate_bps: u16,
        pub normal_reserve_max_amount: u64,
        pub withdrawal_last_created_request_id: u64,
        pub withdrawal_last_processed_batch_id: u64,
        pub withdrawal_last_batch_enqueued_at: i64,
        pub withdrawal_last_batch_processed_at: i64,
        pub withdrawal_pending_batch: WithdrawalBatch,
        pub padding2: [u8; 15],
        pub withdrawal_num_queued_batches: u8,
        pub withdrawal_queued_batches: [WithdrawalBatch; 10],
        pub reserved: [u8; 64],
        pub withdrawal_user_reserved_amount: u64,
        pub operation_receivable_amount: u64,
        pub operation_reserved_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct ClaimUnrestakedVSTCommand {
        pub items: Vec<ClaimUnrestakedVSTCommandItem>,
        pub state: ClaimUnrestakedVSTCommandState,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct ClaimUnrestakedVSTCommandItem {
        pub vault_address: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct ClaimUnrestakedVSTCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub enum ClaimUnrestakedVSTCommandState {
        Init,
        Init2,
        ReadVaultState,
        Claim(ClaimableUnrestakeWithdrawalStatus),
        SetupDenormalize(u64),
        Denormalize(Vec<DenormalizeSupportedTokenAsset>),
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct ClaimUnstakedSOLCommand {
        pub items: Vec<ClaimUnstakedSOLCommandItem>,
        pub state: ClaimUnstakedSOLCommandState,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct ClaimUnstakedSOLCommandItem {
        pub mint: Pubkey,
        pub fund_stake_accounts: Vec<Pubkey>,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct ClaimUnstakedSOLCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, Copy)]
    pub enum ClaimUnstakedSOLCommandState {
        Init,
        ReadPoolState,
        Claim,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct ClaimableToken {
        pub mint: Pubkey,
        pub program: Pubkey,
        pub claimable_amount: u64,
        pub claimed: bool,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct ClaimableUnrestakeWithdrawalStatus {
        pub withdrawal_tickets: Vec<ClaimableUnrestakeWithdrawalTicket>,
        pub expected_ncn_epoch: u64,
        pub delayed_ncn_epoch: u64,
        pub unrestaked_vst_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct ClaimableUnrestakeWithdrawalTicket {
        pub withdrawal_ticket_account: Pubkey,
        pub withdrawal_ticket_token_account: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct DelegateVSTCommand {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct DelegateVSTCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct DenormalizeNTCommand {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct DenormalizeNTCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct DenormalizeSupportedTokenAsset {
        pub operation_reserved_amount: u64,
        pub token_mint: Pubkey,
        pub token_program: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct DepositMetadata {
        pub user: Pubkey,
        pub wallet_provider: String,
        pub contribution_accrual_rate: u8,
        pub expired_at: i64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct EnqueueWithdrawalBatchCommand {
        pub forced: bool,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct EnqueueWithdrawalBatchCommandResult {
        pub enqueued_receipt_token_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct FundAccount {
        pub data_version: u16,
        pub bump: u8,
        pub reserve_account_bump: u8,
        pub treasury_account_bump: u8,
        pub padding: [u8; 10],
        pub transfer_enabled: u8,
        pub receipt_token_mint: Pubkey,
        pub receipt_token_program: Pubkey,
        pub receipt_token_decimals: u8,
        pub padding2: [u8; 7],
        pub receipt_token_supply_amount: u64,
        pub one_receipt_token_as_sol: u64,
        pub receipt_token_value_updated_slot: u64,
        pub receipt_token_value: TokenValuePod,
        pub withdrawal_batch_threshold_interval_seconds: i64,
        pub withdrawal_fee_rate_bps: u16,
        pub withdrawal_enabled: u8,
        pub padding4: [u8; 5],
        pub sol: AssetState,
        pub padding6: [u8; 15],
        pub num_supported_tokens: u8,
        pub supported_tokens: [FundSupportedToken; 10],
        pub normalized_token: NormalizedToken,
        pub padding7: [u8; 15],
        pub num_restaking_vaults: u8,
        pub restaking_vaults: [RestakingVault; 4],
        pub operation: OperationState,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct FundManagerUpdatedFund {
        pub receipt_token_mint: Pubkey,
        pub fund_account: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct FundManagerUpdatedRewardPool {
        pub receipt_token_mint: Pubkey,
        pub reward_account: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct FundWithdrawalBatchAccount {
        pub data_version: u16,
        pub bump: u8,
        pub receipt_token_mint: Pubkey,
        pub supported_token_mint: Option<Pubkey>,
        pub supported_token_program: Option<Pubkey>,
        pub batch_id: u64,
        pub num_requests: u64,
        pub num_claimed_requests: u64,
        pub receipt_token_amount: u64,
        pub claimed_receipt_token_amount: u64,
        pub asset_user_amount: u64,
        pub claimed_asset_user_amount: u64,
        pub asset_fee_amount: u64,
        pub processed_at: i64,
        pub reserved: [u8; 32],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct InitializeCommand {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct InitializeCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct NormalizeLSTCommand {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct NormalizeLSTCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct NormalizeSupportedTokenAsset {
        pub operation_reserved_amount: u64,
        pub token_mint: Pubkey,
        pub token_program: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct NormalizedToken {
        pub mint: Pubkey,
        pub program: Pubkey,
        pub decimals: u8,
        pub enabled: u8,
        pub padding: [u8; 6],
        pub pricing_source: TokenPricingSourcePod,
        pub one_token_as_sol: u64,
        pub operation_reserved_amount: u64,
        pub reserved: [u8; 64],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct NormalizedTokenPoolAccount {
        pub data_version: u16,
        pub bump: u8,
        pub normalized_token_mint: Pubkey,
        pub normalized_token_program: Pubkey,
        pub supported_tokens: Vec<NormalizedSupportedToken>,
        pub normalized_token_decimals: u8,
        pub normalized_token_supply_amount: u64,
        pub normalized_token_value: TokenValue,
        pub normalized_token_value_updated_slot: u64,
        pub one_normalized_token_as_sol: u64,
        pub reserved: [u8; 128],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct NormalizedTokenWithdrawalAccount {
        pub data_version: u16,
        pub bump: u8,
        pub withdrawal_authority: Pubkey,
        pub normalized_token_mint: Pubkey,
        pub normalized_token_pool: Pubkey,
        pub normalized_token_amount: u64,
        pub claimable_tokens: Vec<ClaimableToken>,
        pub created_at: i64,
        pub reserved: [u8; 32],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub enum OperationCommand {
        Initialize(InitializeCommand),
        ClaimUnstakedSOL(ClaimUnstakedSOLCommand),
        EnqueueWithdrawalBatch(EnqueueWithdrawalBatchCommand),
        ProcessWithdrawalBatch(ProcessWithdrawalBatchCommand),
        ClaimUnrestakedVST(ClaimUnrestakedVSTCommand),
        DenormalizeNT(DenormalizeNTCommand),
        UndelegateVST(UndelegateVSTCommand),
        UnrestakeVRT(UnrestakeVRTCommand),
        UnstakeLST(UnstakeLSTCommand),
        StakeSOL(StakeSOLCommand),
        NormalizeLST(NormalizeLSTCommand),
        RestakeVST(RestakeVSTCommand),
        DelegateVST(DelegateVSTCommand),
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperationCommandAccountMeta {
        pub pubkey: Pubkey,
        pub is_writable: bool,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperationCommandAccountMetaPod {
        pub pubkey: Pubkey,
        pub is_writable: u8,
        pub padding: [u8; 7],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct OperationCommandEntry {
        pub command: OperationCommand,
        pub required_accounts: Vec<OperationCommandAccountMeta>,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperationCommandEntryPod {
        pub num_required_accounts: u8,
        pub padding: [u8; 7],
        pub required_accounts: [OperationCommandAccountMetaPod; 32],
        pub command: OperationCommandPod,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperationCommandPod {
        pub discriminant: u8,
        pub buffer: [u8; 2023],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, Copy)]
    pub enum OperationCommandResult {
        Initialize(InitializeCommandResult),
        ClaimUnstakedSOL(ClaimUnstakedSOLCommandResult),
        EnqueueWithdrawalBatch(EnqueueWithdrawalBatchCommandResult),
        ProcessWithdrawalBatch(ProcessWithdrawalBatchCommandResult),
        ClaimUnrestakedVST(ClaimUnrestakedVSTCommandResult),
        DenormalizeNT(DenormalizeNTCommandResult),
        UndelegateVST(UndelegateVSTCommandResult),
        UnrestakeVRT(UnrestakeVRTCommandResult),
        UnstakeLST(UnstakeLSTCommandResult),
        StakeSOL(StakeSOLCommandResult),
        NormalizeLST(NormalizeLSTCommandResult),
        RestakeVST(RestakeVSTCommandResult),
        DelegateVST(DelegateVSTCommandResult),
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperationReservedRestakeToken {
        pub token_mint: Pubkey,
        pub operation_reserved_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperationState {
        pub updated_slot: u64,
        pub updated_at: i64,
        pub expired_at: i64,
        pub padding: [u8; 5],
        pub no_transition: u8,
        pub next_sequence: u16,
        pub num_operated: u64,
        pub next_command: OperationCommandEntryPod,
        pub reserved: [u8; 128],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct OperatorRanFundCommand {
        pub receipt_token_mint: Pubkey,
        pub fund_account: Pubkey,
        pub next_sequence: u16,
        pub num_operated: u64,
        pub command: OperationCommand,
        pub result: Option<OperationCommandResult>,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperatorUpdatedFundPrices {
        pub receipt_token_mint: Pubkey,
        pub fund_account: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperatorUpdatedNormalizedTokenPoolPrices {
        pub normalized_token_mint: Pubkey,
        pub normalized_token_pool_account: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct OperatorUpdatedRewardPools {
        pub receipt_token_mint: Pubkey,
        pub reward_account: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct ProcessWithdrawalBatchCommand {
        pub state: ProcessWithdrawalBatchCommandState,
        pub forced: bool,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct ProcessWithdrawalBatchCommandResult {
        pub supported_token_mint: Option<Pubkey>,
        pub requested_receipt_token_amount: u64,
        pub processed_receipt_token_amount: u64,
        pub reserved_asset_user_amount: u64,
        pub deducted_asset_fee_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, Copy)]
    pub enum ProcessWithdrawalBatchCommandState {
        New(Option<Pubkey>),
        Process(Option<Pubkey>, u64),
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct RestakeVSTCommand {
        pub items: Vec<RestakeVSTCommandItem>,
        pub state: RestakeVSTCommandState,
        pub operation_reserved_restake_token: Option<OperationReservedRestakeToken>,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RestakeVSTCommandItem {
        pub vault_address: Pubkey,
        pub sol_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RestakeVSTCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub enum RestakeVSTCommandState {
        Init,
        SetupRestake,
        SetupNormalize,
        Normalize(Vec<NormalizeSupportedTokenAsset>),
        ReadVaultState,
        Restake([u64; 2]),
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RestakingVault {
        pub vault: Pubkey,
        pub program: Pubkey,
        pub supported_token_mint: Pubkey,
        pub receipt_token_mint: Pubkey,
        pub receipt_token_program: Pubkey,
        pub receipt_token_decimals: u8,
        pub padding: [u8; 7],
        pub one_receipt_token_as_sol: u64,
        pub receipt_token_pricing_source: TokenPricingSourcePod,
        pub receipt_token_operation_reserved_amount: u64,
        pub receipt_token_operation_receivable_amount: u64,
        pub sol_allocation_weight: u64,
        pub sol_allocation_capacity_amount: u64,
        pub padding2: [u8; 7],
        pub num_operators: u8,
        pub operators: [RestakingVaultOperator; 30],
        pub compounding_token_mints: [Pubkey; 10],
        pub reserved: [u8; 128],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RestakingVaultOperator {
        pub operator: Pubkey,
        pub supported_token_allocation_weight: u64,
        pub supported_token_allocation_capacity_amount: u64,
        pub supported_token_delegated_amount: u64,
        pub supported_token_redelegation_amount: u64,
        pub reserved: [u8; 32],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct Reward {
        pub id: u16,
        pub name: [u8; 14],
        pub description: [u8; 128],
        pub reward_type_discriminant: u8,
        pub token_mint: Pubkey,
        pub token_program: Pubkey,
        pub decimals: u8,
        pub padding: [u8; 14],
        pub reserved: [u64; 16],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RewardAccount {
        pub data_version: u16,
        pub bump: u8,
        pub receipt_token_mint: Pubkey,
        pub max_holders: u8,
        pub max_rewards: u16,
        pub max_reward_pools: u8,
        pub num_holders: u8,
        pub num_rewards: u16,
        pub num_reward_pools: u8,
        pub padding: [u8; 5],
        pub holders_1: [RewardPoolHolder; 4],
        pub rewards_1: [Reward; 16],
        pub reward_pools_1: [RewardPool; 4],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RewardPool {
        pub id: u8,
        pub name: [u8; 14],
        pub reward_pool_bitmap: u8,
        pub token_allocated_amount: TokenAllocatedAmount,
        pub contribution: u128,
        pub initial_slot: u64,
        pub updated_slot: u64,
        pub closed_slot: u64,
        pub holder_id: u8,
        pub num_reward_settlements: u8,
        pub padding: [u8; 6],
        pub reserved: [u64; 32],
        pub reward_settlements_1: [RewardSettlement; 16],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RewardPoolHolder {
        pub id: u8,
        pub name: [u8; 14],
        pub description: [u8; 128],
        pub num_pubkeys: u8,
        pub reserved: [u64; 32],
        pub pubkeys_1: [Pubkey; 8],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RewardSettlement {
        pub reward_id: u16,
        pub reward_pool_id: u8,
        pub num_settlement_blocks: u8,
        pub settlement_blocks_head: u8,
        pub settlement_blocks_tail: u8,
        pub padding: [u8; 2],
        pub remaining_amount: u64,
        pub claimed_amount: u64,
        pub claimed_amount_updated_slot: u64,
        pub settled_amount: u64,
        pub settlement_blocks_last_slot: u64,
        pub settlement_blocks_last_reward_pool_contribution: u128,
        pub settlement_blocks: [RewardSettlementBlock; 64],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct RewardSettlementBlock {
        pub amount: u64,
        pub starting_slot: u64,
        pub starting_reward_pool_contribution: u128,
        pub ending_reward_pool_contribution: u128,
        pub ending_slot: u64,
        pub user_settled_amount: u64,
        pub user_settled_contribution: u128,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, Copy)]
    pub enum RewardType {
        Point {
            decimals: u8,
        },
        Token {
            mint: Pubkey,
            program: Pubkey,
            decimals: u8,
        },
        SOL,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct SplWithdrawStakeItem {
        pub validator_stake_account: Pubkey,
        pub fund_stake_account: Pubkey,
        pub fund_stake_account_signer_seeds: Vec<Vec<u8>>,
        pub token_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct StakeSOLCommand {
        pub items: Vec<StakeSOLCommandItem>,
        pub state: StakeSOLCommandState,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct StakeSOLCommandItem {
        pub mint: Pubkey,
        pub sol_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct StakeSOLCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, Copy)]
    pub enum StakeSOLCommandState {
        New,
        Init,
        ReadPoolState,
        Stake,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct TokenAllocatedAmount {
        pub total_amount: u64,
        pub num_records: u8,
        pub padding: [u8; 7],
        pub records: [TokenAllocatedAmountRecord; 10],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct TokenAllocatedAmountRecord {
        pub amount: u64,
        pub contribution_accrual_rate: u8,
        pub padding: [u8; 7],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, Copy)]
    pub enum TokenPricingSource {
        SPLStakePool { address: Pubkey },
        MarinadeStakePool { address: Pubkey },
        JitoRestakingVault { address: Pubkey },
        FragmetricNormalizedTokenPool { address: Pubkey },
        FragmetricRestakingFund { address: Pubkey },
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct TokenPricingSourcePod {
        pub discriminant: u8,
        pub padding: [u8; 7],
        pub address: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct TokenValue {
        pub numerator: Vec<Asset>,
        pub denominator: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct TokenValuePod {
        pub numerator: [AssetPod; 13],
        pub num_numerator: u64,
        pub denominator: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UndelegateVSTCommand {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UndelegateVSTCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct UnrestakeVRTCommand {
        pub items: Vec<UnrestakeVSTCommandItem>,
        pub state: UnrestakeVRTCommandState,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UnrestakeVRTCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub enum UnrestakeVRTCommandState {
        Init,
        ReadVaultState,
        Unstake(Vec<Vec<u8>>),
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UnrestakeVSTCommandItem {
        pub vault_address: Pubkey,
        pub sol_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct UnstakeLSTCommand {
        pub items: Vec<UnstakeLSTCommandItem>,
        pub state: UnstakeLSTCommandState,
        pub spl_withdraw_stake_items: Vec<SplWithdrawStakeItem>,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UnstakeLSTCommandItem {
        pub mint: Pubkey,
        pub token_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UnstakeLSTCommandResult {}
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, Copy)]
    pub enum UnstakeLSTCommandState {
        Init,
        ReadPoolState,
        GetAvailableUnstakeAccount,
        Unstake,
        RequestUnstake,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct UserCanceledWithdrawalRequestFromFund {
        pub receipt_token_mint: Pubkey,
        pub fund_account: Pubkey,
        pub supported_token_mint: Option<Pubkey>,
        pub updated_user_reward_accounts: Vec<Pubkey>,
        pub user: Pubkey,
        pub user_receipt_token_account: Pubkey,
        pub user_fund_account: Pubkey,
        pub batch_id: u64,
        pub request_id: u64,
        pub requested_receipt_token_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UserCreatedOrUpdatedFundAccount {
        pub receipt_token_mint: Pubkey,
        pub user_fund_account: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UserCreatedOrUpdatedRewardAccount {
        pub receipt_token_mint: Pubkey,
        pub user_reward_account: Pubkey,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct UserDepositedToFund {
        pub receipt_token_mint: Pubkey,
        pub fund_account: Pubkey,
        pub supported_token_mint: Option<Pubkey>,
        pub updated_user_reward_accounts: Vec<Pubkey>,
        pub user: Pubkey,
        pub user_receipt_token_account: Pubkey,
        pub user_fund_account: Pubkey,
        pub user_supported_token_account: Option<Pubkey>,
        pub wallet_provider: Option<String>,
        pub contribution_accrual_rate: Option<u8>,
        pub deposited_amount: u64,
        pub minted_receipt_token_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct UserFundAccount {
        pub data_version: u16,
        pub bump: u8,
        pub receipt_token_mint: Pubkey,
        pub user: Pubkey,
        pub receipt_token_amount: u64,
        pub reserved: [u8; 32],
        pub withdrawal_requests: Vec<WithdrawalRequest>,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct UserRequestedWithdrawalFromFund {
        pub receipt_token_mint: Pubkey,
        pub fund_account: Pubkey,
        pub supported_token_mint: Option<Pubkey>,
        pub updated_user_reward_accounts: Vec<Pubkey>,
        pub user: Pubkey,
        pub user_receipt_token_account: Pubkey,
        pub user_fund_account: Pubkey,
        pub batch_id: u64,
        pub request_id: u64,
        pub requested_receipt_token_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UserRewardAccount {
        pub data_version: u16,
        pub bump: u8,
        pub receipt_token_mint: Pubkey,
        pub user: Pubkey,
        pub num_user_reward_pools: u8,
        pub max_user_reward_pools: u8,
        pub padding: [u8; 11],
        pub user_reward_pools_1: [UserRewardPool; 4],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UserRewardPool {
        pub token_allocated_amount: TokenAllocatedAmount,
        pub contribution: u128,
        pub updated_slot: u64,
        pub reward_pool_id: u8,
        pub num_reward_settlements: u8,
        pub padding: [u8; 6],
        pub reserved: [u64; 8],
        pub reward_settlements_1: [UserRewardSettlement; 16],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UserRewardSettlement {
        pub reward_id: u16,
        pub padding: [u8; 6],
        pub settled_amount: u64,
        pub settled_contribution: u128,
        pub settled_slot: u64,
        pub claimed_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct UserTransferredReceiptToken {
        pub receipt_token_mint: Pubkey,
        pub fund_account: Pubkey,
        pub updated_user_reward_accounts: Vec<Pubkey>,
        pub source: Pubkey,
        pub source_receipt_token_account: Pubkey,
        pub source_fund_account: Option<Pubkey>,
        pub destination: Pubkey,
        pub destination_receipt_token_account: Pubkey,
        pub destination_fund_account: Option<Pubkey>,
        pub transferred_receipt_token_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
    pub struct UserUpdatedRewardPool {
        pub receipt_token_mint: Pubkey,
        pub updated_user_reward_accounts: Vec<Pubkey>,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct UserWithdrewFromFund {
        pub receipt_token_mint: Pubkey,
        pub fund_account: Pubkey,
        pub supported_token_mint: Option<Pubkey>,
        pub user: Pubkey,
        pub user_receipt_token_account: Pubkey,
        pub user_fund_account: Pubkey,
        pub user_supported_token_account: Option<Pubkey>,
        pub fund_withdrawal_batch_account: Pubkey,
        pub batch_id: u64,
        pub request_id: u64,
        pub burnt_receipt_token_amount: u64,
        pub returned_receipt_token_amount: u64,
        pub withdrawn_amount: u64,
        pub deducted_fee_amount: u64,
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct WithdrawalBatch {
        pub batch_id: u64,
        pub num_requests: u64,
        pub receipt_token_amount: u64,
        pub enqueued_at: i64,
        pub reserved: [u8; 32],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct WithdrawalRequest {
        pub batch_id: u64,
        pub request_id: u64,
        pub receipt_token_amount: u64,
        pub created_at: i64,
        pub supported_token_mint: Option<Pubkey>,
        pub supported_token_program: Option<Pubkey>,
        pub reserved: [u8; 14],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct FundSupportedToken {
        pub mint: Pubkey,
        pub program: Pubkey,
        pub decimals: u8,
        pub padding: [u8; 7],
        pub pricing_source: TokenPricingSourcePod,
        pub one_token_as_sol: u64,
        pub token: AssetState,
        pub rebalancing_amount: u64,
        pub sol_allocation_weight: u64,
        pub sol_allocation_capacity_amount: u64,
        pub reserved: [u8; 64],
    }
    #[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
    pub struct NormalizedSupportedToken {
        pub mint: Pubkey,
        pub program: Pubkey,
        pub lock_account: Pubkey,
        pub locked_amount: u64,
        pub decimals: u8,
        pub withdrawal_reserved_amount: u64,
        pub one_token_as_sol: u64,
        pub pricing_source: TokenPricingSource,
        pub reserved: [u8; 14],
    }
}
pub mod account {
    #![doc = r" Structs of accounts which hold state."]
    use super::*;
    #[account]
    #[derive(Debug)]
    #[doc = " Account: FundAccount"]
    #[derive(Copy)]
    pub struct FundAccount {
        pub data_version: u16,
        pub bump: u8,
        pub reserve_account_bump: u8,
        pub treasury_account_bump: u8,
        pub padding: [u8; 10],
        pub transfer_enabled: u8,
        pub receipt_token_mint: Pubkey,
        pub receipt_token_program: Pubkey,
        pub receipt_token_decimals: u8,
        pub padding2: [u8; 7],
        pub receipt_token_supply_amount: u64,
        pub one_receipt_token_as_sol: u64,
        pub receipt_token_value_updated_slot: u64,
        pub receipt_token_value: TokenValuePod,
        pub withdrawal_batch_threshold_interval_seconds: i64,
        pub withdrawal_fee_rate_bps: u16,
        pub withdrawal_enabled: u8,
        pub padding4: [u8; 5],
        pub sol: AssetState,
        pub padding6: [u8; 15],
        pub num_supported_tokens: u8,
        pub supported_tokens: [FundSupportedToken; 10],
        pub normalized_token: NormalizedToken,
        pub padding7: [u8; 15],
        pub num_restaking_vaults: u8,
        pub restaking_vaults: [RestakingVault; 4],
        pub operation: OperationState,
    }
    #[account]
    #[derive(Debug)]
    #[doc = " Account: FundWithdrawalBatchAccount"]
    #[derive(Copy)]
    pub struct FundWithdrawalBatchAccount {
        pub data_version: u16,
        pub bump: u8,
        pub receipt_token_mint: Pubkey,
        pub supported_token_mint: Option<Pubkey>,
        pub supported_token_program: Option<Pubkey>,
        pub batch_id: u64,
        pub num_requests: u64,
        pub num_claimed_requests: u64,
        pub receipt_token_amount: u64,
        pub claimed_receipt_token_amount: u64,
        pub asset_user_amount: u64,
        pub claimed_asset_user_amount: u64,
        pub asset_fee_amount: u64,
        pub processed_at: i64,
        pub reserved: [u8; 32],
    }
    #[account]
    #[derive(Debug)]
    #[doc = " Account: NormalizedTokenPoolAccount"]
    pub struct NormalizedTokenPoolAccount {
        pub data_version: u16,
        pub bump: u8,
        pub normalized_token_mint: Pubkey,
        pub normalized_token_program: Pubkey,
        pub supported_tokens: Vec<NormalizedSupportedToken>,
        pub normalized_token_decimals: u8,
        pub normalized_token_supply_amount: u64,
        pub normalized_token_value: TokenValue,
        pub normalized_token_value_updated_slot: u64,
        pub one_normalized_token_as_sol: u64,
        pub reserved: [u8; 128],
    }
    #[account]
    #[derive(Debug)]
    #[doc = " Account: NormalizedTokenWithdrawalAccount"]
    pub struct NormalizedTokenWithdrawalAccount {
        pub data_version: u16,
        pub bump: u8,
        pub withdrawal_authority: Pubkey,
        pub normalized_token_mint: Pubkey,
        pub normalized_token_pool: Pubkey,
        pub normalized_token_amount: u64,
        pub claimable_tokens: Vec<ClaimableToken>,
        pub created_at: i64,
        pub reserved: [u8; 32],
    }
    #[account]
    #[derive(Debug)]
    #[doc = " Account: RewardAccount"]
    #[derive(Copy)]
    pub struct RewardAccount {
        pub data_version: u16,
        pub bump: u8,
        pub receipt_token_mint: Pubkey,
        pub max_holders: u8,
        pub max_rewards: u16,
        pub max_reward_pools: u8,
        pub num_holders: u8,
        pub num_rewards: u16,
        pub num_reward_pools: u8,
        pub padding: [u8; 5],
        pub holders_1: [RewardPoolHolder; 4],
        pub rewards_1: [Reward; 16],
        pub reward_pools_1: [RewardPool; 4],
    }
    #[account]
    #[derive(Debug)]
    #[doc = " Account: UserFundAccount"]
    pub struct UserFundAccount {
        pub data_version: u16,
        pub bump: u8,
        pub receipt_token_mint: Pubkey,
        pub user: Pubkey,
        pub receipt_token_amount: u64,
        pub reserved: [u8; 32],
        pub withdrawal_requests: Vec<WithdrawalRequest>,
    }
    #[account]
    #[derive(Debug)]
    #[doc = " Account: UserRewardAccount"]
    #[derive(Copy)]
    pub struct UserRewardAccount {
        pub data_version: u16,
        pub bump: u8,
        pub receipt_token_mint: Pubkey,
        pub user: Pubkey,
        pub num_user_reward_pools: u8,
        pub max_user_reward_pools: u8,
        pub padding: [u8; 11],
        pub user_reward_pools_1: [UserRewardPool; 4],
    }
}
pub mod context {
    #![doc = r" Accounts used in instructions."]
    use super::*;
    #[derive(Accounts)]
    pub struct AdminInitializeExtraAccountMetaList<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub extra_account_meta_list: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct AdminInitializeFundAccount<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_mint: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub fund_receipt_token_lock_account: AccountInfo<'info>,
        pub fund_reserve_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct AdminInitializeNormalizedTokenPoolAccount<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub normalized_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_pool_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct AdminInitializeRewardAccount<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct AdminUpdateExtraAccountMetaListIfNeeded<'info> {
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub extra_account_meta_list: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct AdminUpdateFundAccountIfNeeded<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub fund_reserve_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct AdminUpdateNormalizedTokenPoolAccountIfNeeded<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub normalized_token_program: AccountInfo<'info>,
        pub normalized_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_pool_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct AdminUpdateRewardAccountIfNeeded<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerAddNormalizedTokenPoolSupportedToken<'info> {
        pub fund_manager: Signer<'info>,
        pub normalized_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_pool_account: AccountInfo<'info>,
        pub normalized_token_program: AccountInfo<'info>,
        pub supported_token_mint: AccountInfo<'info>,
        pub supported_token_program: AccountInfo<'info>,
        pub normalized_token_pool_supported_token_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerAddReward<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        pub reward_token_mint: AccountInfo<'info>,
        pub reward_token_program: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerAddRewardPool<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerAddRewardPoolHolder<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerAddSupportedToken<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub supported_token_mint: AccountInfo<'info>,
        pub supported_token_program: AccountInfo<'info>,
        pub supported_token_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerCloseFundAccount<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub admin: Signer<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerCloseRewardPool<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerInitializeFundJitoRestakingVault<'info> {
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        pub vault_program: AccountInfo<'info>,
        pub vault_account: AccountInfo<'info>,
        pub vault_receipt_token_mint: AccountInfo<'info>,
        pub vault_receipt_token_program: AccountInfo<'info>,
        pub vault_supported_token_mint: AccountInfo<'info>,
        pub vault_supported_token_program: AccountInfo<'info>,
        pub fund_vault_receipt_token_account: AccountInfo<'info>,
        pub fund_vault_supported_token_account: AccountInfo<'info>,
        pub vault_vault_supported_token_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerInitializeFundNormalizedToken<'info> {
        pub admin: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        pub normalized_token_mint: AccountInfo<'info>,
        pub normalized_token_program: AccountInfo<'info>,
        pub fund_normalized_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_pool_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerSettleReward<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        pub reward_token_mint: AccountInfo<'info>,
        pub reward_token_program: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerUpdateFundStrategy<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerUpdateRestakingVaultOperatorStrategy<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerUpdateRestakingVaultStrategy<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerUpdateSolStrategy<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct FundManagerUpdateSupportedTokenStrategy<'info> {
        pub fund_manager: Signer<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct OperatorLogMessage<'info> {
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct OperatorRunFundCommand<'info> {
        #[account(mut)]
        pub operator: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct OperatorUpdateFundPrices<'info> {
        #[account(mut)]
        pub operator: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct OperatorUpdateNormalizedTokenPoolPrices<'info> {
        pub operator: Signer<'info>,
        #[account(mut)]
        pub normalized_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_pool_account: AccountInfo<'info>,
        pub normalized_token_program: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct OperatorUpdateRewardPools<'info> {
        #[account(mut)]
        pub operator: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct SlasherInitializeNormalizedTokenWithdrawalAccount<'info> {
        #[account(mut)]
        pub payer: Signer<'info>,
        pub slasher: Signer<'info>,
        #[account(mut)]
        pub normalized_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_pool_account: AccountInfo<'info>,
        pub normalized_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub slasher_normalized_token_withdrawal_ticket_account: AccountInfo<'info>,
        #[account(mut)]
        pub slasher_normalized_token_account: AccountInfo<'info>,
        pub system_program: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct SlasherWithdrawNormalizedToken<'info> {
        #[account(mut)]
        pub slasher: Signer<'info>,
        #[account(mut)]
        pub normalized_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_pool_account: AccountInfo<'info>,
        pub normalized_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub slasher_normalized_token_withdrawal_ticket_account: AccountInfo<'info>,
        pub supported_token_mint: AccountInfo<'info>,
        pub supported_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub normalized_token_pool_supported_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub destination_supported_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub destination_rent_lamports_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct TokenTransferHook<'info> {
        pub source_receipt_token_account: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        pub destination_receipt_token_account: AccountInfo<'info>,
        pub owner: AccountInfo<'info>,
        pub extra_account_meta_list: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserCancelWithdrawalRequest<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_lock_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_receipt_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_reserve_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub instructions_sysvar: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserClaimRewards<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserDepositSol<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_lock_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_receipt_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_reserve_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub instructions_sysvar: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserDepositSupportedToken<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        pub supported_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub user_receipt_token_account: AccountInfo<'info>,
        pub supported_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub fund_supported_token_reserve_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_supported_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub instructions_sysvar: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserInitializeFundAccount<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        pub user_receipt_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserInitializeRewardAccount<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        pub user_receipt_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserRequestWithdrawal<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_lock_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_receipt_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_reserve_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub instructions_sysvar: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserUpdateFundAccountIfNeeded<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        pub user_receipt_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_fund_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserUpdateRewardAccountIfNeeded<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        pub user_receipt_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserUpdateRewardPools<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserWithdrawSol<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub system_program: AccountInfo<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        pub receipt_token_mint: AccountInfo<'info>,
        pub user_receipt_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_withdrawal_batch_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_reserve_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_treasury_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_fund_account: AccountInfo<'info>,
        pub reward_account: AccountInfo<'info>,
        pub user_reward_account: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
    #[derive(Accounts)]
    pub struct UserWithdrawSupportedToken<'info> {
        #[account(mut)]
        pub user: Signer<'info>,
        pub receipt_token_program: AccountInfo<'info>,
        pub supported_token_program: AccountInfo<'info>,
        #[account(mut)]
        pub receipt_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub user_receipt_token_account: AccountInfo<'info>,
        pub supported_token_mint: AccountInfo<'info>,
        #[account(mut)]
        pub user_supported_token_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_withdrawal_batch_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_supported_token_reserve_account: AccountInfo<'info>,
        #[account(mut)]
        pub fund_treasury_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_fund_account: AccountInfo<'info>,
        #[account(mut)]
        pub reward_account: AccountInfo<'info>,
        #[account(mut)]
        pub user_reward_account: AccountInfo<'info>,
        pub instructions_sysvar: AccountInfo<'info>,
        pub event_authority: AccountInfo<'info>,
        pub program: AccountInfo<'info>,
    }
}

#[anchor_lang::program]
pub mod client {
    #![doc = " Anchor CPI crate generated from restaking v0.3.2 using [anchor-gen](https://crates.io/crates/anchor-gen) v0.30.1."]
    use super::*;
    pub fn admin_initialize_extra_account_meta_list(
        _ctx: Context<AdminInitializeExtraAccountMetaList>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn admin_initialize_fund_account(_ctx: Context<AdminInitializeFundAccount>) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn admin_initialize_normalized_token_pool_account(
        _ctx: Context<AdminInitializeNormalizedTokenPoolAccount>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn admin_initialize_reward_account(
        _ctx: Context<AdminInitializeRewardAccount>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn admin_update_extra_account_meta_list_if_needed(
        _ctx: Context<AdminUpdateExtraAccountMetaListIfNeeded>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn admin_update_fund_account_if_needed(
        _ctx: Context<AdminUpdateFundAccountIfNeeded>,
        _desired_account_size: Option<u32>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn admin_update_normalized_token_pool_account_if_needed(
        _ctx: Context<AdminUpdateNormalizedTokenPoolAccountIfNeeded>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn admin_update_reward_account_if_needed(
        _ctx: Context<AdminUpdateRewardAccountIfNeeded>,
        _desired_account_size: Option<u32>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_add_normalized_token_pool_supported_token(
        _ctx: Context<FundManagerAddNormalizedTokenPoolSupportedToken>,
        _pricing_source: TokenPricingSource,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_add_reward(
        _ctx: Context<FundManagerAddReward>,
        _name: String,
        _description: String,
        _reward_type: RewardType,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_add_reward_pool(
        _ctx: Context<FundManagerAddRewardPool>,
        _name: String,
        _holder_id: Option<u8>,
        _custom_contribution_accrual_rate_enabled: bool,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_add_reward_pool_holder(
        _ctx: Context<FundManagerAddRewardPoolHolder>,
        _name: String,
        _description: String,
        _pubkeys: Vec<Pubkey>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_add_supported_token(
        _ctx: Context<FundManagerAddSupportedToken>,
        _pricing_source: TokenPricingSource,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_close_fund_account(
        _ctx: Context<FundManagerCloseFundAccount>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_close_reward_pool(
        _ctx: Context<FundManagerCloseRewardPool>,
        _reward_pool_id: u8,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_initialize_fund_jito_restaking_vault(
        _ctx: Context<FundManagerInitializeFundJitoRestakingVault>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_initialize_fund_normalized_token(
        _ctx: Context<FundManagerInitializeFundNormalizedToken>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_settle_reward(
        _ctx: Context<FundManagerSettleReward>,
        _reward_pool_id: u8,
        _reward_id: u16,
        _amount: u64,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_update_fund_strategy(
        _ctx: Context<FundManagerUpdateFundStrategy>,
        _withdrawal_enabled: bool,
        _withdrawal_fee_rate_bps: u16,
        _withdrawal_batch_threshold_seconds: i64,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_update_restaking_vault_operator_strategy(
        _ctx: Context<FundManagerUpdateRestakingVaultOperatorStrategy>,
        _vault: Pubkey,
        _operator: Pubkey,
        _token_allocation_weight: u64,
        _token_allocation_capacity_amount: u64,
        _token_redelegation_amount: Option<u64>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_update_restaking_vault_strategy(
        _ctx: Context<FundManagerUpdateRestakingVaultStrategy>,
        _vault: Pubkey,
        _sol_allocation_weight: u64,
        _sol_allocation_capacity_amount: u64,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_update_sol_strategy(
        _ctx: Context<FundManagerUpdateSolStrategy>,
        _sol_accumulated_deposit_capacity_amount: u64,
        _sol_accumulated_deposit_amount: Option<u64>,
        _sol_withdrawable: bool,
        _sol_withdrawal_normal_reserve_rate_bps: u16,
        _sol_withdrawal_normal_reserve_max_amount: u64,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn fund_manager_update_supported_token_strategy(
        _ctx: Context<FundManagerUpdateSupportedTokenStrategy>,
        _token_mint: Pubkey,
        _token_accumulated_deposit_capacity_amount: u64,
        _token_accumulated_deposit_amount: Option<u64>,
        _token_withdrawable: bool,
        _token_withdrawal_normal_reserve_rate_bps: u16,
        _token_withdrawal_normal_reserve_max_amount: u64,
        _token_rebalancing_amount: Option<u64>,
        _sol_allocation_weight: u64,
        _sol_allocation_capacity_amount: u64,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn operator_log_message(_ctx: Context<OperatorLogMessage>, _message: String) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn operator_run_fund_command(
        _ctx: Context<OperatorRunFundCommand>,
        _force_reset_command: Option<OperationCommandEntry>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn operator_update_fund_prices(_ctx: Context<OperatorUpdateFundPrices>) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn operator_update_normalized_token_pool_prices(
        _ctx: Context<OperatorUpdateNormalizedTokenPoolPrices>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn operator_update_reward_pools(_ctx: Context<OperatorUpdateRewardPools>) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn slasher_initialize_normalized_token_withdrawal_account(
        _ctx: Context<SlasherInitializeNormalizedTokenWithdrawalAccount>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn slasher_withdraw_normalized_token(
        _ctx: Context<SlasherWithdrawNormalizedToken>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn token_transfer_hook(_ctx: Context<TokenTransferHook>, _amount: u64) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_cancel_withdrawal_request(
        _ctx: Context<UserCancelWithdrawalRequest>,
        _request_id: u64,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_claim_rewards(
        _ctx: Context<UserClaimRewards>,
        _reward_pool_id: u8,
        _reward_id: u8,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_deposit_sol(
        _ctx: Context<UserDepositSol>,
        _amount: u64,
        _metadata: Option<DepositMetadata>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_deposit_supported_token(
        _ctx: Context<UserDepositSupportedToken>,
        _amount: u64,
        _metadata: Option<DepositMetadata>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_initialize_fund_account(_ctx: Context<UserInitializeFundAccount>) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_initialize_reward_account(
        _ctx: Context<UserInitializeRewardAccount>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_request_withdrawal(
        _ctx: Context<UserRequestWithdrawal>,
        _receipt_token_amount: u64,
        _supported_token_mint: Option<Pubkey>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_update_fund_account_if_needed(
        _ctx: Context<UserUpdateFundAccountIfNeeded>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_update_reward_account_if_needed(
        _ctx: Context<UserUpdateRewardAccountIfNeeded>,
        _desired_account_size: Option<u32>,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_update_reward_pools(_ctx: Context<UserUpdateRewardPools>) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_withdraw_sol(_ctx: Context<UserWithdrawSol>, _request_id: u64) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
    pub fn user_withdraw_supported_token(
        _ctx: Context<UserWithdrawSupportedToken>,
        _request_id: u64,
    ) -> Result<()> {
        unimplemented!("This program is a wrapper for CPI.")
    }
}

#[cfg(test)]
mod tests {
    use anchor_client::{
        solana_sdk::{instruction::AccountMeta, signature::read_keypair_file},
        Client,
    };
    use anchor_lang::{pubkey, solana_program::pubkey::Pubkey, AnchorDeserialize, Discriminator};
    use solana_client::rpc_client::RpcClient;
    use std::rc::Rc;

    #[cfg(feature = "devnet")]
    const CLUSTER: &str = "https://api.devnet.solana.com";
    #[cfg(not(feature = "devnet"))]
    const CLUSTER: &str = "https://api.mainnet-beta.solana.com";

    const FRAGSOL_MINT: Pubkey = pubkey!("FRAGSEthVFL7fdqM8hxfxkfCZzUvmg21cqPJVvC1qdbo");
    #[cfg(feature = "devnet")]
    const FRAGSOL_FUND: Pubkey = pubkey!("4YHmpuyY54Bsj61qNxYGgtQy8xhacfnhdZ6W92rqB64w");
    #[cfg(not(feature = "devnet"))]
    const FRAGSOL_FUND: Pubkey = pubkey!("3TK9fNePM4qdKC4dwvDe8Bamv14prDqdVfuANxPeiryb");

    const NSOL_MINT: Pubkey = pubkey!("nSoLnkrvh2aY792pgCNT6hzx84vYtkviRzxvhf3ws8e");
    const NSOL_PROGRAM:Pubkey = pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
    #[cfg(feature = "devnet")]
    const NSOL_POOL: Pubkey = pubkey!("36znkkBhTNJY6PzidFN7vwuZysbn8P8hz4LBk3AZn33Z");
    #[cfg(not(feature = "devnet"))]
    const NSOL_POOL: Pubkey = pubkey!("AkbZvKxUAxMKz92FF7g5k2YLCJftg8SnYEPWdmZTt3mp");

    #[test]
    fn get_latest_fragsol_price() {
        let rpc: RpcClient = RpcClient::new(CLUSTER);
        let fund = fetch_fragsol_fund_account();
        let epoch_schedule = rpc.get_epoch_schedule().unwrap();
        let current_epoch = rpc.get_epoch_info().unwrap().epoch;
        let updated_epoch = epoch_schedule.get_epoch(fund.receipt_token_value_updated_slot);

        // need to deal with edge-case of sudden epoch transition for onchain usecases
        if current_epoch == updated_epoch {
            println!("latest fragSOL price: {}", fund.one_receipt_token_as_sol);
        } else {
            update_fragsol_fund_prices(&fund);
            let fund = fetch_fragsol_fund_account();
            let updated_epoch = epoch_schedule.get_epoch(fund.receipt_token_value_updated_slot);
            if current_epoch == updated_epoch {
                println!("latest fragSOL price: {}", fund.one_receipt_token_as_sol);
            } else {
                panic!("cannot get latest fragSOL price");
            }
        }
    }

    fn fetch_fragsol_fund_account() -> crate::account::FundAccount {
        let rpc: RpcClient = RpcClient::new(CLUSTER);
        let account_data = rpc
            .get_account_data(&FRAGSOL_FUND)
            .unwrap();
        let account_data_slice = &mut account_data.as_slice();
        assert_eq!(
            crate::account::FundAccount::discriminator(),
            account_data_slice[0..8]
        );
        let account_data_slice_without_discriminator = &mut &account_data_slice[8..];
        crate::account::FundAccount::deserialize(
            account_data_slice_without_discriminator,
        )
            .unwrap()
    }

    fn update_fragsol_fund_prices(fund: &crate::account::FundAccount) {
        // note that this payer has zero balance on mainnet account, so the tx will fail on mainnet.
        let payer = read_keypair_file("dummy_user_keypair.json").unwrap();
        let client = Client::new(CLUSTER.parse().unwrap(), Rc::new(payer));
        let fragmetric_client = client.program(crate::ID).unwrap();

        let mut pricing_source_accounts = fund.supported_tokens
            .iter()
            .take(fund.num_supported_tokens as usize)
            .map(|supported_token| AccountMeta {
                pubkey: supported_token.pricing_source.address,
                is_signer: false,
                is_writable: false,
            })
            .collect::<Vec<_>>();
        pricing_source_accounts.extend(fund.restaking_vaults
            .iter()
            .take(fund.num_restaking_vaults as usize)
            .map(|restaking_vault| AccountMeta {
                pubkey: restaking_vault.receipt_token_pricing_source.address,
                is_signer: false,
                is_writable: false,
            })
            .collect::<Vec<_>>());
        pricing_source_accounts.extend(vec![
            AccountMeta {
                pubkey: fund.normalized_token.pricing_source.address,
                is_signer: false,
                is_writable: false,
            },
        ]);

        let tx_sig = fragmetric_client
            .request()
            .accounts(crate::accounts::OperatorUpdateFundPrices {
                operator: fragmetric_client.payer(),
                system_program: Pubkey::default(),
                receipt_token_mint: FRAGSOL_MINT,
                fund_account: FRAGSOL_FUND,
                event_authority: Pubkey::find_program_address(&[b"__event_authority"], &crate::ID)
                    .0,
                program: crate::ID,
            })
            .accounts(pricing_source_accounts)
            .args(crate::instruction::OperatorUpdateFundPrices {})
            .send()
            .unwrap();

        println!(
            "update_fragsol_fund_prices tx confirmed: {}",
            tx_sig
        );
    }

    #[test]
    fn get_latest_nsol_price() {
        let rpc: RpcClient = RpcClient::new(CLUSTER);
        let ntp = fetch_nsol_pool_account();
        let epoch_schedule = rpc.get_epoch_schedule().unwrap();
        let current_epoch = rpc.get_epoch_info().unwrap().epoch;
        let updated_epoch = epoch_schedule.get_epoch(ntp.normalized_token_value_updated_slot);

        // need to deal with edge-case of sudden epoch transition for onchain usecases
        if current_epoch == updated_epoch {
            println!("latest nSOL price: {}", ntp.one_normalized_token_as_sol);
        } else {
            update_nosl_pool_prices(&ntp);
            let ntp = fetch_nsol_pool_account();
            let updated_epoch = epoch_schedule.get_epoch(ntp.normalized_token_value_updated_slot);
            if current_epoch == updated_epoch {
                println!("latest nSOL price: {}", ntp.one_normalized_token_as_sol);
            } else {
                panic!("cannot get latest nSOL price");
            }
        }
    }

    fn fetch_nsol_pool_account() -> crate::account::NormalizedTokenPoolAccount {
        let rpc: RpcClient = RpcClient::new(CLUSTER);
        let account_data = rpc
            .get_account_data(&NSOL_POOL)
            .unwrap();
        let account_data_slice = &mut account_data.as_slice();
        assert_eq!(
            crate::account::NormalizedTokenPoolAccount::discriminator(),
            account_data_slice[0..8]
        );
        let account_data_slice_without_discriminator = &mut &account_data_slice[8..];
        crate::account::NormalizedTokenPoolAccount::deserialize(
            account_data_slice_without_discriminator,
        )
        .unwrap()
    }

    fn update_nosl_pool_prices(ntp: &crate::account::NormalizedTokenPoolAccount) {
        // note that this payer has zero balance on mainnet account, so the tx will fail on mainnet.
        let payer = read_keypair_file("dummy_user_keypair.json").unwrap();
        let client = Client::new(CLUSTER.parse().unwrap(), Rc::new(payer));
        let fragmetric_client = client.program(crate::ID).unwrap();

        let tx_sig = fragmetric_client
            .request()
            .accounts(crate::accounts::OperatorUpdateNormalizedTokenPoolPrices {
                operator: fragmetric_client.payer(),
                normalized_token_mint: NSOL_MINT,
                normalized_token_pool_account: NSOL_POOL,
                normalized_token_program: NSOL_PROGRAM,
                event_authority: Pubkey::find_program_address(&[b"__event_authority"], &crate::ID)
                    .0,
                program: crate::ID,
            })
            .accounts(
                ntp.supported_tokens
                    .iter()
                    .map(|supported_token| match supported_token.pricing_source {
                        crate::typedef::TokenPricingSource::SPLStakePool { address } => address,
                        crate::typedef::TokenPricingSource::MarinadeStakePool { address } => {
                            address
                        }
                        _ => panic!("unexpected underlying assets"),
                    })
                    .map(|piricng_source_account| AccountMeta {
                        pubkey: piricng_source_account,
                        is_signer: false,
                        is_writable: false,
                    })
                    .collect::<Vec<_>>(),
            )
            .args(crate::instruction::OperatorUpdateNormalizedTokenPoolPrices {})
            .send()
            .unwrap();

        println!(
            "update_nosl_pool_prices tx confirmed: {}",
            tx_sig
        );
    }
}
